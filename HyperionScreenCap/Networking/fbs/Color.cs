// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace hyperionnet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Color : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Color GetRootAsColor(ByteBuffer _bb) { return GetRootAsColor(_bb, new Color()); }
  public static Color GetRootAsColor(ByteBuffer _bb, Color obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool MutateData(int data) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, data); return true; } else { return false; } }
  public int Duration { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool MutateDuration(int duration) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, duration); return true; } else { return false; } }

  public static Offset<hyperionnet.Color> CreateColor(FlatBufferBuilder builder,
      int data = -1,
      int duration = -1) {
    builder.StartTable(2);
    Color.AddDuration(builder, duration);
    Color.AddData(builder, data);
    return Color.EndColor(builder);
  }

  public static void StartColor(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddData(FlatBufferBuilder builder, int data) { builder.AddInt(0, data, -1); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(1, duration, -1); }
  public static Offset<hyperionnet.Color> EndColor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<hyperionnet.Color>(o);
  }
  public ColorT UnPack() {
    var _o = new ColorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ColorT _o) {
    _o.Data = this.Data;
    _o.Duration = this.Duration;
  }
  public static Offset<hyperionnet.Color> Pack(FlatBufferBuilder builder, ColorT _o) {
    if (_o == null) return default(Offset<hyperionnet.Color>);
    return CreateColor(
      builder,
      _o.Data,
      _o.Duration);
  }
};

public class ColorT
{
  public int Data { get; set; }
  public int Duration { get; set; }

  public ColorT() {
    this.Data = -1;
    this.Duration = -1;
  }
}


}

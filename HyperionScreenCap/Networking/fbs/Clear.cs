// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace hyperionnet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Clear : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Clear GetRootAsClear(ByteBuffer _bb) { return GetRootAsClear(_bb, new Clear()); }
  public static Clear GetRootAsClear(ByteBuffer _bb, Clear obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Clear __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Priority { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutatePriority(int priority) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, priority); return true; } else { return false; } }

  public static Offset<hyperionnet.Clear> CreateClear(FlatBufferBuilder builder,
      int priority = 0) {
    builder.StartTable(1);
    Clear.AddPriority(builder, priority);
    return Clear.EndClear(builder);
  }

  public static void StartClear(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(0, priority, 0); }
  public static Offset<hyperionnet.Clear> EndClear(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<hyperionnet.Clear>(o);
  }
  public ClearT UnPack() {
    var _o = new ClearT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ClearT _o) {
    _o.Priority = this.Priority;
  }
  public static Offset<hyperionnet.Clear> Pack(FlatBufferBuilder builder, ClearT _o) {
    if (_o == null) return default(Offset<hyperionnet.Clear>);
    return CreateClear(
      builder,
      _o.Priority);
  }
};

public class ClearT
{
  public int Priority { get; set; }

  public ClearT() {
    this.Priority = 0;
  }
}


}
